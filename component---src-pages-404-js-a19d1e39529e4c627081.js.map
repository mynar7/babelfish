{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./src/components/providers/speechProvider.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","NotFoundPage","a","createElement","title","reducer","state","action","payload","type","Object","assign","lastSpoken","results","concat","spoken","translated","fromLang","name","code","toLang","listening","SpeechContext","createContext","useSpeechContext","context","useContext","Error","SpeechProvider","props","_useReducer","useReducer","speechState","dispatch","sharedValues","updateLastSpoken","lastSpokenPhrase","addTranslationResult","result","setFromLang","isoLangCode","clearFromLang","setToLang","clearToLang","toggleListening","react__WEBPACK_IMPORTED_MODULE_2___default","Provider","value","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","React","InternalPageRenderer","json","propTypes","PropTypes","shape","pathname","string","isRequired","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","defaultProps","arrayOf","object","func","Header","siteTitle","react_default","style","background","marginBottom","margin","maxWidth","padding","gatsby_link_default","to","color","textDecoration","Layout","children","_856328897","speechProvider","className","header","node"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAaeQ,UARM,kBACnBJ,EAAAK,EAAAC,cAACJ,EAAA,EAAD,KACEF,EAAAK,EAAAC,cAACH,EAAA,EAAD,CAAKI,MAAM,mBACXP,EAAAK,EAAAC,cAAA,uBACAN,EAAAK,EAAAC,cAAA,wMCPJ,SAASE,EAAQC,EAAOC,GAAQ,IACtBC,EAAkBD,EAAlBC,QACR,OAD0BD,EAATE,MAEf,IAAK,mBACH,OAAAC,OAAAC,OAAA,GACKL,EADL,CAEEM,WAAYJ,IAEhB,IAAK,YACH,OAAAE,OAAAC,OAAA,GACKL,EADL,CAEEO,QAAO,GAAAC,OAAMR,EAAMO,QAAZ,CAAqB,CAAEE,OAAQT,EAAMM,WAAYI,WAAYR,OAExE,IAAK,cACH,OAAAE,OAAAC,OAAA,GACKL,EADL,CACYW,SAAU,CAAEC,KAAMV,EAAQU,KAAMC,KAAMX,EAAQW,QAE5D,IAAK,YACH,OAAAT,OAAAC,OAAA,GACKL,EADL,CACYc,OAAQ,CAAEF,KAAMV,EAAQU,KAAMC,KAAMX,EAAQW,QAE1D,IAAK,kBACH,OAAAT,OAAAC,OAAA,GACKL,EADL,CACYe,WAAYf,EAAMe,YAEhC,QACE,OAAOf,GAIb,IAAMgB,EAAgBC,0BAEtB,SAASC,IACP,IAAMC,EAAUC,qBAAWJ,GAC3B,IAAIG,EACF,MAAM,IAAIE,MAAJ,0DAER,OAAOF,EAGT,SAASG,EAAeC,GAAO,IAAAC,EACGC,qBAAW1B,EAAS,CAClDY,SAAU,CACRC,KAAM,UACNC,KAAM,MAERC,OAAQ,CACNF,KAAM,WACNC,KAAM,MAERP,WAAY,GACZS,WAAW,EACXR,QAAS,KAXJmB,EADsBF,EAAA,GACTG,EADSH,EAAA,GAmC7B,IAAMI,EAAe,CACnBF,cACAG,iBAvBF,SAA0BC,GACxBH,EAAS,CAACxB,KAAM,mBAAoBD,QAAS4B,KAuB7CC,qBArBF,SAA8BC,GAC5BL,EAAS,CAACxB,KAAM,YAAaD,QAAS8B,KAqBtCC,YAnBF,SAAqBC,GACnBP,EAAS,CAACxB,KAAM,cAAeD,QAASgC,KAmBxCC,cAjBF,WACER,EAAS,CAACxB,KAAM,cAAeD,QAAS,CAACU,KAAM,GAAIC,KAAM,OAiBzDuB,UAfF,SAAmBF,GACjBP,EAAS,CAACxB,KAAM,YAAaD,QAASgC,KAetCG,YAbF,WACEV,EAAS,CAACxB,KAAM,YAAaD,QAAS,CAACU,KAAM,GAAIC,KAAM,OAavDyB,gBAXF,WACEX,EAAS,CAACxB,KAAM,sBAalB,OAAOoC,EAAA3C,EAAAC,cAACmB,EAAcwB,SAAfpC,OAAAC,OAAA,CAAwBoC,MAAOb,GAAkBL,0BCxF1D,IAAsBmB,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,0KCKzCK,EAAmB,SAAAC,GAAiC,IAA9BC,EAA8BD,EAA9BC,SAAUC,EAAoBF,EAApBE,cACpC,OAAKA,EAGEC,IAAMtD,cAAcuD,IAApBhD,OAAAC,OAAA,CACL4C,WACAC,iBACGA,EAAcG,OALV,MASXN,EAAiBO,UAAY,CAC3BL,SAAUM,IAAUC,MAAM,CACxBC,SAAUF,IAAUG,OAAOC,aAC1BA,YAGUZ,8GCVf,SAASa,EAATZ,GAAiD,IAAlCa,EAAkCb,EAAlCa,YAAaC,EAAqBd,EAArBc,KAAMC,EAAef,EAAfe,KAAMjE,EAASkD,EAATlD,MAC9BkE,EADuCC,EAAAC,KACvCF,KAcFG,EAAkBN,GAAeG,EAAKI,aAAaP,YAEzD,OACEQ,EAAAzE,EAAAC,cAACyE,EAAA1E,EAAD,CACE2E,eAAgB,CACdT,QAEFhE,MAAOA,EACP0E,cAAa,QAAUR,EAAKI,aAAatE,MACzCiE,KAAM,CACJ,CACEnD,KAAI,cACJ6D,QAASN,GAEX,CACEO,SAAQ,WACRD,QAAS3E,GAEX,CACE4E,SAAQ,iBACRD,QAASN,GAEX,CACEO,SAAQ,UACRD,QAAO,WAET,CACE7D,KAAI,eACJ6D,QAAO,WAET,CACE7D,KAAI,kBACJ6D,QAAST,EAAKI,aAAaO,QAE7B,CACE/D,KAAI,gBACJ6D,QAAS3E,GAEX,CACEc,KAAI,sBACJ6D,QAASN,IAEX3D,OAAOuD,KAKfH,EAAIgB,aAAe,CACjBd,KAAI,KACJC,KAAM,GACNF,YAAW,IAGbD,EAAIN,UAAY,CACdO,YAAaN,IAAUG,OACvBI,KAAMP,IAAUG,OAChBK,KAAMR,IAAUsB,QAAQtB,IAAUuB,QAClChF,MAAOyD,IAAUG,OAAOC,YAGXC,sPC1EYT,IAAMlC,cAAc,IAuDvCsC,IAAUuB,OACTvB,IAAUG,OAAOC,WAChBJ,IAAUwB,KACRxB,IAAUwB,KCnEtB,IAAMC,EAAS,SAAAhC,GAAA,IAAGiC,EAAHjC,EAAGiC,UAAH,OACbC,EAAAtF,EAAAC,cAAA,UACEsF,MAAO,CACLC,WAAU,gBACVC,aAAY,YAGdH,EAAAtF,EAAAC,cAAA,OACEsF,MAAO,CACLG,OAAM,SACNC,SAAU,IACVC,QAAO,sBAGTN,EAAAtF,EAAAC,cAAA,MAAIsF,MAAO,CAAEG,OAAQ,IACnBJ,EAAAtF,EAAAC,cAAC4F,EAAA7F,EAAD,CACE8F,GAAG,IACHP,MAAO,CACLQ,MAAK,QACLC,eAAc,SAGfX,OAOXD,EAAO1B,UAAY,CACjB2B,UAAW1B,IAAUG,QAGvBsB,EAAOJ,aAAe,CACpBK,UAAS,IAGID,0BC3BTa,EAAS,SAAA7C,GAAkB,IAAf8C,EAAe9C,EAAf8C,SACV5B,EAAO6B,EAAA7B,KAUb,OACEgB,EAAAtF,EAAAC,cAACmG,EAAA,EAAD,KACEd,EAAAtF,EAAAC,cAAA,OAAKoG,UAAU,cACbf,EAAAtF,EAAAC,cAACqG,EAAD,CAAQjB,UAAWf,EAAKF,KAAKI,aAAatE,QAC1CoF,EAAAtF,EAAAC,cAAA,OAAKoG,UAAU,qBACbf,EAAAtF,EAAAC,cAAA,YAAOiG,OAOjBD,EAAOvC,UAAY,CACjBwC,SAAUvC,IAAU4C,KAAKxC,YAGZkC","file":"component---src-pages-404-js-a19d1e39529e4c627081.js","sourcesContent":["import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n","import React, { createContext, useContext, useReducer } from 'react'\n\nfunction reducer(state, action) {\n  const { payload, type } = action\n  switch(type) {\n    case 'updateLastSpoken':\n      return {\n        ...state,\n        lastSpoken: payload\n      }\n    case 'addResult':\n      return {\n        ...state,\n        results: [...state.results, { spoken: state.lastSpoken, translated: payload }]\n      }\n    case 'setFromLang':\n      return {\n        ...state, fromLang: { name: payload.name, code: payload.code }\n      }\n    case 'setToLang':\n      return {\n        ...state, toLang: { name: payload.name, code: payload.code }\n      }\n    case 'toggleListening':\n      return {\n        ...state, listening: !state.listening\n      }\n    default:\n      return state\n  }\n}\n\nconst SpeechContext = createContext()\n\nfunction useSpeechContext() {\n  const context = useContext(SpeechContext)\n  if(!context) {\n    throw new Error(`useSpeechProvider must be used within a SpeechProvider`)\n  }\n  return context\n}\n\nfunction SpeechProvider(props) {\n  const [speechState, dispatch] = useReducer(reducer, {\n    fromLang: {\n      name: 'English',\n      code: 'en',\n    },\n    toLang: {\n      name: 'Japanese',\n      code: 'ja',\n    },\n    lastSpoken: '',\n    listening: false,\n    results: []\n  })\n  function updateLastSpoken(lastSpokenPhrase) {\n    dispatch({type: 'updateLastSpoken', payload: lastSpokenPhrase})\n  }\n  function addTranslationResult(result) {\n    dispatch({type: 'addResult', payload: result})\n  }\n  function setFromLang(isoLangCode) {\n    dispatch({type: 'setFromLang', payload: isoLangCode})\n  }\n  function clearFromLang() {\n    dispatch({type: 'setFromLang', payload: {name: '', code: ''}})\n  }\n  function setToLang(isoLangCode) {\n    dispatch({type: 'setToLang', payload: isoLangCode})\n  }\n  function clearToLang() {\n    dispatch({type: 'setToLang', payload: {name: '', code: ''}})\n  }\n  function toggleListening() {\n    dispatch({type: 'toggleListening'})\n  }\n  const sharedValues = {\n    speechState,\n    updateLastSpoken,\n    addTranslationResult,\n    setFromLang,\n    clearFromLang,\n    setToLang,\n    clearToLang,\n    toggleListening,\n  }\n\n  return <SpeechContext.Provider value={sharedValues} {...props}/>\n}\n\nexport { SpeechProvider, useSpeechContext }","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Header from \"./header\"\nimport \"./layout.css\"\nimport { SpeechProvider } from '../components/providers/speechProvider'\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <SpeechProvider>\n      <div className=\"font-serif\">\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div className=\"container mx-auto\">\n          <main>{children}</main>\n        </div>\n      </div>\n    </SpeechProvider>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}