{"version":3,"sources":["webpack:///./src/components/translationResults.js","webpack:///./src/components/listenButton.js","webpack:///./src/pages/index.js","webpack:///./src/components/providers/speechProvider.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/speechRecognition.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["translationResults","speechState","useSpeechContext","react_default","a","createElement","Fragment","results","length","map","_ref","index","spoken","translated","key","listenButton","_useSpeechContext","listening","toggleListening","className","onClick","IndexPage","layout","seo","title","reducer","state","action","payload","type","Object","assign","lastSpoken","concat","fromLang","toLang","SpeechContext","createContext","context","useContext","Error","SpeechProvider","props","_useReducer","useReducer","dispatch","sharedValues","updateLastSpoken","lastSpokenPhrase","addTranslationResult","result","setFromLang","isoLangCode","setToLang","react__WEBPACK_IMPORTED_MODULE_1___default","Provider","value","m","module","exports","require","default","ProdPageRenderer","location","pageResources","React","InternalPageRenderer","json","propTypes","PropTypes","shape","pathname","string","isRequired","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","defaultProps","arrayOf","object","translate","term","fetch","then","res","catch","err","console","log","speechRecognition","_useSpeechContext$spe","recognition","window","SpeechRecognition","webkitSpeechRecognition","interimResults","useEffect","handleResult","regenerator_default","mark","_callee","e","translation","wrap","_context","prev","next","isFinal","transcript","sent","stop","_x","apply","this","arguments","restartListener","start","addEventListener","removeEventListener","func","Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","gatsby_link_default","to","color","textDecoration","Layout","children","_856328897","speechProvider","header","node"],"mappings":"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","file":"component---src-pages-index-js-46e925bc489fe06b3b5e.js","sourcesContent":["import React from 'react'\nimport { useSpeechContext } from './providers/speechProvider'\n\nexport default () => {\n  const { speechState } = useSpeechContext()\n\n  return (\n    <>\n      {\n        speechState.results.length > 0\n        ? speechState.results.map(({spoken, translated}, index) => (\n          <React.Fragment key={index}>\n            <p>{spoken}</p>\n            <p>{translated}</p>\n          </React.Fragment>\n        ))\n        : <p>Press 'Listen' and allow Babelfish to use your microphone to translate your spoken words to Japanese! (Only works in Chrome)</p>\n      }\n    </>\n  )\n}","import React from 'react'\nimport { useSpeechContext } from './providers/speechProvider'\n\nexport default () => {\n  const {speechState: {listening}, toggleListening} = useSpeechContext()\n  return (\n    <button className=\"bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded\"\n      onClick={toggleListening}>\n      {listening ? 'Stop' : 'Listen'}\n    </button>\n  )\n}","import React from \"react\"\n// import { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport TranslationResults from '../components/translationResults'\nimport ListenButton from '../components/listenButton'\n\nconst IndexPage = () => {\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <div className=\"flex justify-center\">\n        <div className=\"w-1/2\">\n          <TranslationResults />\n        </div>\n        <div>\n          <ListenButton/>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n","import React, { createContext, useContext, useReducer } from 'react'\n\nfunction reducer(state, action) {\n  const { payload, type } = action\n  switch(type) {\n    case 'updateLastSpoken':\n      return {\n        ...state,\n        lastSpoken: payload\n      }\n    case 'addResult':\n      return {\n        ...state,\n        results: [...state.results, { spoken: state.lastSpoken, translated: payload }]\n      }\n    case 'setFromLang':\n      return {\n        ...state, fromLang: payload\n      }\n    case 'setToLang':\n      return {\n        ...state, toLang: payload\n      }\n    case 'toggleListening':\n      return {\n        ...state, listening: !state.listening\n      }\n    default:\n      return state\n  }\n}\n\nconst SpeechContext = createContext()\n\nfunction useSpeechContext() {\n  const context = useContext(SpeechContext)\n  if(!context) {\n    throw new Error(`useSpeechProvider must be used within a SpeechProvider`)\n  }\n  return context\n}\n\nfunction SpeechProvider(props) {\n  const [speechState, dispatch] = useReducer(reducer, {\n    fromLang: 'en',\n    toLang: 'ja',\n    lastSpoken: '',\n    listening: false,\n    results: []\n  })\n  function updateLastSpoken(lastSpokenPhrase) {\n    dispatch({type: 'updateLastSpoken', payload: lastSpokenPhrase})\n  }\n  function addTranslationResult(result) {\n    dispatch({type: 'addResult', payload: result})\n  }\n  function setFromLang(isoLangCode) {\n    dispatch({type: 'setFromLang', payload: isoLangCode})\n  }\n  function setToLang(isoLangCode) {\n    dispatch({type: 'setToLang', payload: isoLangCode})\n  }\n  function toggleListening() {\n    dispatch({type: 'toggleListening'})\n  }\n  const sharedValues = {\n    speechState,\n    updateLastSpoken,\n    addTranslationResult,\n    setFromLang,\n    setToLang,\n    toggleListening,\n  }\n\n  return <SpeechContext.Provider value={sharedValues} {...props}/>\n}\n\nexport { SpeechProvider, useSpeechContext }","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","// eslint-disable-next-line\nimport React, { useEffect } from 'react'\nimport { useSpeechContext } from './providers/speechProvider'\n\n\nfunction translate(term, fromLang, toLang) {\n  const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${fromLang}&tl=${toLang}&dt=t&q=${term}`;\n  return fetch(url)\n  .then(res => res.json())\n  .then(res => {\n      return res[0][0][0] ? res[0][0][0] : null\n  })\n  .catch(err => console.log(err));\n}\n\nexport default () => {\n  const { speechState: {listening, fromLang, toLang}, updateLastSpoken, addTranslationResult } = useSpeechContext()\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n  const recognition = new SpeechRecognition();\n  recognition.interimResults = true;\n  recognition.lang = fromLang;\n  useEffect(() => {\n    if(!listening) return\n    const handleResult = async (e) => {\n      if (e.results[0].isFinal) {\n        const result = e.results[0][0].transcript;\n        updateLastSpoken(result)\n        const translation = await translate(result, fromLang, toLang);\n        addTranslationResult(translation)\n      }\n    }\n    const restartListener = () => {\n      recognition.start()\n    }\n    recognition.addEventListener('result', handleResult)\n    recognition.addEventListener('end', restartListener);\n    recognition.start()\n    return () => {\n      if(!listening) return\n      recognition.removeEventListener('result', handleResult)\n      recognition.removeEventListener('end', restartListener)\n    }\n  }, [listening])\n\n  return null\n}","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { SpeechProvider } from './providers/speechProvider'\nimport SpeechRecognition from './speechRecognition'\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <SpeechProvider>\n      <SpeechRecognition />\n      <div className=\"font-serif\">\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div className=\"container mx-auto\">\n          <main>{children}</main>\n        </div>\n      </div>\n    </SpeechProvider>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}