{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/speechRecognition.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","NotFoundPage","a","createElement","title","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","React","InternalPageRenderer","Object","assign","json","propTypes","PropTypes","shape","pathname","string","isRequired","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","arrayOf","object","translate","term","fromLang","toLang","fetch","then","res","console","log","catch","err","speechRecognition","_useSpeechContext","useSpeechContext","_useSpeechContext$spe","speechState","listening","code","updateLastSpoken","addTranslationResult","useEffect","recognition","window","SpeechRecognition","webkitSpeechRecognition","interimResults","handleResult","regenerator_default","mark","_callee","e","result","translation","wrap","_context","prev","next","results","isFinal","transcript","sent","stop","_x","apply","this","arguments","restartListener","start","addEventListener","removeEventListener","createContext","func","Header","siteTitle","react_default","style","background","marginBottom","margin","maxWidth","padding","gatsby_link_default","to","color","textDecoration","Layout","children","_856328897","Fragment","className","header","node"],"mappings":"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","file":"component---src-pages-404-js-984e27da0d9b01ce0560.js","sourcesContent":["import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","// eslint-disable-next-line\nimport React, { useEffect, useRef } from 'react'\nimport { useSpeechContext } from './providers/speechProvider'\n\n\nfunction translate(term, fromLang, toLang) {\n  const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${fromLang}&tl=${toLang}&dt=t&q=${term}&dt=rm`;\n  return fetch(url)\n  .then(res => res.json())\n  .then(res => {\n      console.log(res)\n      return res[0][0][0] ? res[0][0][0] : null\n  })\n  .catch(err => console.log(err));\n}\n\nexport default () => {\n  const { speechState: {listening, fromLang: {code: fromLang}, toLang: {code: toLang}}, updateLastSpoken, addTranslationResult } = useSpeechContext()\n  useEffect(() => {\n    if(!listening) return\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = true;\n    recognition.lang = fromLang;\n    const handleResult = async (e) => {\n      if (e.results[0].isFinal) {\n        const result = e.results[0][0].transcript;\n        console.log(e.results[0])\n        updateLastSpoken(result)\n        const translation = await translate(result, fromLang, toLang);\n        addTranslationResult(translation)\n      }\n    }\n    const restartListener = () => {\n      if(fromLang === '' || toLang === '') return\n      recognition.start()\n    }\n    recognition.addEventListener('result', handleResult)\n    recognition.addEventListener('end', restartListener)\n    if(fromLang === '' || toLang === '') return\n    recognition.start()\n    return () => {\n      if(!listening) return\n      recognition.removeEventListener('result', handleResult)\n      recognition.removeEventListener('end', restartListener)\n    }\n  }, [listening, fromLang, toLang])\n  return null\n}","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport SpeechRecognition from './speechRecognition'\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <SpeechRecognition />\n      <div className=\"font-serif\">\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div className=\"container mx-auto\">\n          <main>{children}</main>\n        </div>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}